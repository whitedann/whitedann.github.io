extends layout

block content
  .col-md-9
    h1 Using Python to Animate Physical Systems
    hr.bg-white
    .text-center.pt-3
      img(width='50%' src="assets/pendStill.png")
    .container.text-center.my-3
      a(href="https://github.com/whitedann/pendulumSimulations")
        i.fab.fa-lg.fa-github.contact-logo
    hr.bg-white
    p In this article, I will explain how to animate some simple physical systems using the Python plotting library matplotlib. 
    p To start, each system is built into a class which has three main members:
    ul
      li A method which defines and returns the differential equations describing the system's motion. We represent the system with the variable Z.
      li A method which solves the system of equations and returns the coordinates of each mass for each "step" in time.
      li An initial state from which the system will kick off.
    h2 Single Pendulum
    p We want to draw (x,y) as a function time using the system of equations:
    .text-center.my-5
      img(src="assets/eqns/1.png").eqn
    p We use the built-in function odeint from the SciPy library to solve for the values of theta as a function of time. We need to supply SciPy's odeint method with the equations, the initial state and the desired time coordinates as paramters. So, we will initialize the pendulum object with init_state at 35 degrees and a time interval of .025 from 0 to 50. This produces 2000 frames which will be rendered at 40fps over 50 seconds.
    p We can also use this time to define the length of the Pendulum L, and the acceleration due to gravity, g.
    pre.mx-5.p-3.code-block.rounded
      code
        |  import numpy as np
        |  from matplotlib import pyplot as plt
        |  from scipy.integrate import odeint
        |  import matplotlib.animation as animation
        |
        |  class Pendulum():
        |
        |  """init_state has the form [theta, thetaDot]"""
        |    def __init__(self,
        |               g = 9.8,
        |               L = 2.0):
        |
        |      self.init_state = [np.radians(35.0), 0]
        |      self.time = np.arange(0, 50.0, 0.025) 
        |      self.g = g
        |      self.L = L
    p Now let's create a callable function for odeint that returns the system we want to intergrate, and initialize it to the initial state that we pass to odeint (this will be init_state).
    pre.mx-5.p-3.code-block.rounded
      code
        |    def equation(self, z0,t):
        |
        |        theta, thetaDot = z0
        |        dzdt = [thetaDot, -(self.g/self.L)*sin(theta)]
        |        return dzdt
    p Then let's create a function which perfroms the odeint call, and then converts the data into (x,y) coordinates so that we can more easily plot it.
    pre.mx-5.p-3.code-block.rounded
      code
        |    def solve_ODE(self):
        |       
        |        self.state = odeint(self.equation, self.init_state, self.time)
        |        x1 = sin(self.state[:, 0])*self.L
        |        y1 = -1*cos(self.state[:, 0])*self.L
        |
        |        return x1, y1
    p Outside of the declaration, let's create a pendulum object and call the solve_ODE method on it so we can create the data we need to animate the pendulum and save it as an array.
    pre.mx-5.p-3.code-block.rounded
      code
        |   pend = Pendulum()
        |   singlePendulumData = np.array(pend.solve_ODE())
        |
        |   fig = plt.figure()
        |   ax = fig.add_subplot(111)
        |   line, = ax.plot([],[])
    p Afterward we need to create a window, "fig", and create a subplot "ax" within it. Then we initialize a tuple of lists called "line" to represent the pendulum. The first list in the tuple represents the x values of the line and the second list represents the y values of the line. 
    p The method we will use to animate our data, FuncAnimation, takes a figure and repeatedly calls an "animate" function over and over again for the entered number of frames. We need to make the animate function draw the pendulum for each frame in time by setting the line data to the frame indexed by the incrementing variable "num". Finally, we call the animation function putting in all parameters and save it to the variable "ani":
    pre.mx-5.p-3.code-block.rounded
      code
        |   def animateSinglePendulum(num, data, line):
        |    		line.set_data([0,data[0,num]], [0,data[1,num]])
        |    		return line
        |
        |   ani = animation.FuncAnimation(fig, animateSinglePendulum,
        |         interval=1, frames=2000, fargs=(singlePendulumData, line),
        |         init_func=initSinglePendulumWindow, repeat=False)
    p Below are simulations using two different initial angles, 15 and 35 degrees. In each simulation, there  is a red and blue pendulum. The red pendulum represents the data that we got from integrating the equations shown above with SciPy's odeint utility. The blue pendulum represents the data that we would get if we integrated the equations using the less accurate "small-angle approximation" that is often used to solve the equations without a computer integrater. You can see how the approximation differs from the integrated solution pretty quickly, especially for a larger initial angle.  
    .container
      .row
        .col-md-6
          video(width="100%" autoplay, loop, muted)
            source(src="assets/sPend15.mp4", type="video/mp4")
          p.text-center Initial Angle = 15 Degrees
        .col-md-6
          video(width="100%" autoplay, loop, muted)
            source(src="assets/sPend35.mp4", type="video/mp4")
          p.text-center Initial Angle = 35 Degrees
    h2.mt-5 Two Coupled Pendulums
    p We can animate a system of two coupled pendulums in a similar way. We'll start with the equations of motion:
    .text-center.my-5
      img(src="assets/eqns/2.png").eqn
    p Where theta is the angle of the left pendulum and phi is the angle of the right pendulum. Using lagrangian mechanics we produce the relations: 
    .text-center.my-5
      img(src="assets/eqns/3.png").eqnlong
    .text-center.my-5
      img(src="assets/eqns/4.png").eqnlong
    p Again the goal here is to integrate these equations with the odeint method. The "k" variable corresponds to the spring constant of the rod connecting the pendula.
    p Then all we need to do is reformat the pendulum class to contain the new variables representing the second pendulum (L2, M2, spring constant k), and then insert the new equations into the equation function. The complete class ends up being:
    pre.mx-5.p-3.code-block.rounded
      code
        |class coupledPendulum():
        |
        |    def __init__(self,
        |     g = 9.8,
        |     L1 = 1.5,
        |     L2 = 1.5,
        |     M1 = 1.0,
        |     M2 = 1.0,
        |     k = 0.5):
        |
        |  """initial state is (theta, thetaDot, phi, phiDot) in degrees """
        |  """where theta is the initial angle of the left pendulum, thetaDot is the initial speed """
        |  """of the left pendulum, and phi/phiDot is the same for the right pendulum"""
        |  self.init_state = [np.radians(25.0), 0, np.radians(0.0), 0]
        |  self.params = (L1, L2, M1, M2, g, k)
        |  self.time = np.arange(0, 50.0, 0.025)
        |
        |  def equation(self, z0,t):
        |     (L1, L2, M1, M2, g, k) = self.params
        |     theta, thetaDot, phi, phiDot = z0
        |
        |     dzdt = [
        |      thetaDot,
        |     (sin(theta) * (M1 * (L1 * thetaDot * thetaDot - g) - k * L1) + k * L2 * sin(phi)) / (M1 * L1 * cos(theta)),
        |     phiDot,
        |     (sin(phi) * (M2 * (L2 * phiDot * phiDot - g) - k * L2) + k * L1 * sin(theta)) / (M2 * L2 * cos(phi))
        |     ]
        |
        |     return dzdt 
        |
        |  def solve_ODE(self):
        |     self.state = odeint(self.equation, self.init_state, self.time)
        |
        |     """convert data into (x,y) coordinates"""
        |     x1 = sin(self.state[:, 0])*self.params[0]
        |     y1 = -1*cos(self.state[:, 0])*self.params[0]
        |     x2 = sin(self.state[:, 2])*self.params[1]
        |     y2 = -1*cos(self.state[:, 2])*self.params[1]
        |     return x1, y1, x2, y2    
    p We will need to rebuild the animation function. I added a third line to represent the spring that couples the two pendulums, and I added a text field that shows the tension in the string.
    p The tops of each pendulum are set at (-1, 0) and (1, 0) respectively, so we need to adjust the data as such in the animate function. The spring line is drawn between the two end points of the both pendulums.
    p I calculated the tension in the string using Hooke's law and the x-coordinate difference between the two pendula.
    pre.mx-5.p-3.code-block.rounded
      code
        |def animateCoupledPendulum(num,data2,line,line2, line3, line4, line5):
        |
        |      """draw left pendulum, right pendulum, and the spring connecting them"""
        |      line.set_data([-1, data2[0, num] - 1], [0, data2[1, num]])
        |      line2.set_data([1, data2[2, num] + 1], [0, data2[3, num]])
        |      line3.set_data([data2[0, num] -1, data2[2, num] + 1], [data2[1, num], data2[3, num]])
        |   
        |      """xdata is the time used for the displacment plots, and ydata(1,2) is the angular displacements for these plots"""
        |      xdata.append(num/40.0)
        |      ydata1.append(np.degrees(np.arctan(data2[0,num]/data2[1,num])))
        |      ydata2.append(np.degrees(np.arctan(data2[2,num]/data2[3,num])))
        |
        |      """plot the displacement plots"""
        |      line4.set_data(xdata, ydata1)
        |      line5.set_data(xdata, ydata2)
        |   
        |      """update spring tension text, time text"""
        |      theta_text.set_text('Spring Tension: ' + str(abs(round(coupPend.getSpringConstant()*(data2[2,num]-data2[0,num]),1))) + 'N')
        |      time_text.set_text('t= ' + str(round(num*0.025,1)) + 's')
        |      return line, line2, line3, line4, line5
    p The animation object is essentially the same as the one used in the single pendulum simulation. 
    p It's interesting to see how the energy transfers from pendulum to pendulum. One other thing I'd like to note is that the tension is calculated by ignoring any displacment in the y direction, i.e. this is not a 100% accurate model in that the forces exerted on the masses by the spring only have an x-component.     
    p You can also see clearly the movement of energy in this system. At certain critical moments, all of the kinetic energy occupies in one pendulum, while the other remains motionless.
    .container.text-center
      video(width="70%" autoplay, loop, muted)
        source(src="assets/cPend25.mp4", type="video/mp4")
    h2.mt-5 The Double Pendulum
    p Lastly, we have the double pendulum. Like with the coupled pendulum system, we have two generalized coordinates. One for the angular position of the upper leg of the pendulum, and one for the angular position of the lower leg of the pendulum. Theta will be used for the upper leg, and phi will be used for the lower leg. 
    p We will start by defining a first order system of equations from the basis vector z consisting of the states of the system, and from that create a system of first order equations that we can plug into the odeint function: 
    .text-center.my-5
      img(src="assets/eqns/5.png").eqn
    p I will skip over the method for animating these equations as it is very similar to the two systems above. The only difference is that we insert different equations into the odeint function, and scale the animation axes appropriately.
    p If you would like to see the Double Pendulum class in full, you can follow the git link at the top of the page. 
    .container
      .row
        .col-md-6
          video(width="100%" autoplay, loop, muted)
            source(src="assets/dPend89.mp4", type="video/mp4")
          p.text-center Initial Angle = 89 Degrees
        .col-md-6
          video(width="100%" autoplay, loop, muted)
            source(src="assets/dPend90.mp4", type="video/mp4")
          p.text-center Initial Angle = 90 Degrees
    p  Here is a pair of simulations where the initial angle differs by a single degree. From these animations side by side, it is easy to see the nonlinear behavior of this system; even after a few moments, the direction and speed of these two systems is totally different.
    hr.bg-white



    
